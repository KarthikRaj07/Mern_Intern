 const Toggletheme =()=>{
      settheme(theme=>theme==="light"?"dark":"light")
      console.log({theme})
  }

<h1>{theme}</h1>
      <button onClick={Toggletheme}>click</button>

use context hook:
without following the hierrachy passing one componet to another component

i)create context
ii)use context


in the example :
create context will be done in app componet and use context used in user componet 


------
import "./App.css";
import Container from "./components/container";
import { useState } from "react";

function App() {
  const [theme, setTheme] = useState("light");

  const toggleTheme = () => {
    setTheme((theme) => (theme === "light" ? "dark" : "light"));
    console.log({ theme });
  };

  return (
    <div className={theme}>
      <h1>{theme}</h1>
      <button onClick={toggleTheme}>Click</button>
      <Container change={theme} />
    </div>
  );
}

export default App;

// {/* <div style={{ backgroundColor: theme === "light" ? "black" : "white", color: theme === "light" ? "white" : "black"}}> */}
--------------
import "./App.css";
import Container from "./components/container";
import { useState, createContext } from "react";

export const themeContext = createContext();

function App() {
  const [theme, setTheme] = useState("light");
  const [styles, setstyle] = useState({ backgroundColor: "pink", color: "black" });

  const toggleTheme = () => {
    setTheme((theme) => (theme === "light" ? "dark" : "light"));
   
  };

  return (
    <div>
      <themeContext.Provider value={{ theme, styles }}>
        <h1 style={styles}>{theme}</h1>
        <button onClick={toggleTheme}>Click</button>
        <Container change={theme} />
      </themeContext.Provider>
    </div>
  );
}

export default App;
-----------------------------


use effect:
    synchronising a component with external sysytem .
    after an action monitoring or checking the side effects happening in the functional componet is possible in use effect hook
    
